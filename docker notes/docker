### Docker Installation
 * Docker can be installed on any linux or windows 10+, win 2016+
 *  Lets create a linux vm in any cloud of your choice.
 *  To login into linux machine
### After login into the linux instance
 ```
 curl -fsSL https://get.docker.com -o get-docker.sh
 sh get-docker.sh
 sudo usermod -aG docker <username>
 exit and relogin
 docker inf
 ```
* https://docs.docker.com/get-started/docker_cheatsheet.pdfdocker commands use cheatsheet
* To run a container we need a docker image.command  `hello-world` was name of the docker image.
* Docker images are available on docker registries. The default docker registry is docker hub.
### How to create container?
`docker container run <image-name>`
* docker engine checks for existence of images locally `docker image ls`.
* Once the image is downloaded, the docker engine creates a container based on docker image.
* To download the image from registry we use `pull`. if we create a new image in some machine to make it available in your repository we will be using `push`
### image and tag
* Any docker image represents some application. Every application will have multiple versions.
* In Docker to represent application we use name of image and to represent version we use tag
### Container Options
 * We can perform the following operations
      * create container
      * Delete container
      * start container
      * stop container
      * pause container
      * unpause container
* Every container when created gets a unique
     * container id
     * container name 
* we can set conatainer name
`docker container run --name <con:name> <image>:<tag>`
* To see the container running in the docker host
`docker container ls`
* When the container is created, each container gets its own
    * network ip address
    * RAM
    * filesysystem
    * CPU
* Execute  to know the cpu/RAM utilization
`docker stats`
### Exploring container
  * On the docker host execute the folowing commands
       * list all the process `ps` or `ps aux`
       ![Alt text](image.png)
       * get the ip address `ip add` or `ifconfig` (10.2.0.4)
       * username => qtdevops
       * hostname => qtdocker
       * Explore storage `df -h` & `lsblk`
       ![Alt text](image-1.png)
* Lets create a container and login into that
`docker container run -it nginx /bin/sh`
* Docker image contains all the necessary files to run whatever application we want inside container.
### Lets create a docker container and install our application in it
 * to run the container in the background mode (detached mode) we use `-d`
 * The application which i want to run is apache server
 * Apache runs on port 80
 * Create a docker contianer with ubuntu image. Run it in the interactive mode.
 * Ensure port forwarding is set
 ``docker container run -p 8081:80 ubuntu:22.04 /bin/bash``
  #apt update
  #apt install apache2 -y
  #service apache2 start 
 ![Alt text](image3.png) 
### Lets create a docker image by manually installing softwares in container
 * Lets install a nginx in some container and create a image out of it
 * lets create a container in a interactive mode
 ``docker container run -p 8082:80 -it ubuntu:22.04 /bin/bash``
 #apt update
 #apt install nginx -y
 #service nginx start
![Alt text](image4.png)
### Now lets create a docker image from running container
 `docker commit (container:id/name)`
 ![Alt text](image5.png)
### Now lets create an image and tag based the image id
![Alt text](image6.png)
### Dockerfile
* Dockerfile has instructions to containerize the application.
* Dockerfile can be written in any text file, but file a name `Dockerfile` is most commonly used
```Dockerfile
FROM alpine:latest
CMD ["echo", "Welcome to container world"]
```
build the image`docker image build -t my-dockerfile .`
![Alt text](image7.png)
NOW CHECK THE IMAGES
`docker image ls`
![Alt text](image8.png)
LETS RUN THE CONTAINER FORM THE IMAGE
![Alt text](image9.png)
### Creating a container image using Dockerfile â€“ Approach 1
 * https://docs.docker.com/engine/reference/builder/ dockerfile instractions
 * Pick a base image => ubuntu:22.04
 * spring petclinic runs on port 8080
 * Steps to install 
 ```
 sudo apt update
 sudo apt install openjdk-11-jdk -y 
 wget https://referenceapplicationskhaja.s3.us-west-2.amazonaws.com/spring-petclinic-2.4.2.jar
TO START THE APPLICATION => java -jar spring-petclinic-2.4.2.jar
 ```
* create a folder `mkdir spcdockerfile`
  and go that folder `cd spcdockerfile` and create dockerfile `vi Dockerfile`
```
FROM ubuntu:22.04
RUN apt update
RUN apt install openjdk-11-jdk -y
RUN wget https://referenceapplicationskhaja.s3.us-west-2.amazonaws.com/spring-petclinic-2.4.2.jar
EXPOSE 8080
CMD  ["java", "-jar", "/spring-petclinic-2.4.2.jar"]
```
create image from dockerfile
```
docker image build -t spcdockerfile .
docker image ls
```
![Alt text](image10.png)
* to run the container form image
```
 docker container run -d --name spcdockerfile1 -p 8081:80 spcdockerfile
 docker container ls
```
![Alt text](image11.png)
![Alt text](image12.png)

